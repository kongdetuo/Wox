<Window x:Class="Wox.MainWindow"
        xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:i="clr-namespace:Avalonia.Xaml.Interactivity;assembly=Avalonia.Xaml.Interactivity"
        xmlns:ia="clr-namespace:Avalonia.Xaml.Interactions.Core;assembly=Avalonia.Xaml.Interactions"
        xmlns:wox="using:Wox"
		xmlns:v="using:Wox"
        xmlns:vm="using:Wox.ViewModel"
		xmlns:converters="using:Wox.Converters"
		mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
		SizeToContent="Height" Width="500"
		ShowInTaskbar="False"
		SystemDecorations="BorderOnly"
		IsVisible="{Binding ShowMainWindow}"
		Background="{DynamicResource WindowBackground}"
		Deactivated="Window_Deactivated"
		Activated="Window_Activated"
		WindowStartupLocation="Manual">
	<Window.Resources>
		<converters:QuerySuggestionBoxConverter x:Key="QuerySuggestionBoxConverter" />

	</Window.Resources>

	<Window.KeyBindings>
		<KeyBinding Gesture="Escape" Command="{Binding EscCommand}" />
		<KeyBinding Gesture="F1" Command="{Binding StartHelpCommand}" />
		<KeyBinding Gesture="F5" Command="{Binding RefreshCommand}" />
		<KeyBinding Gesture="Tab" Command="{Binding SelectNextItemCommand}" />
		<KeyBinding Gesture="Shift+Tab" Command="{Binding SelectedResults.SelectPrevItemCommand}" />
		<KeyBinding Gesture="Ctrl+H" Command="{Binding LoadHistoryCommand}" />
		<KeyBinding Gesture="Shift+Enter" Command="{Binding LoadContextMenuCommand}" CommandParameter="{Binding SelectedResults.SelectedItem}" />
		<KeyBinding Gesture="Enter" Command="{Binding OpenResultCommand}"  CommandParameter="{Binding SelectedResults.SelectedItem}"/>
		<KeyBinding Gesture="Ctrl+Enter" Command="{Binding OpenResultCommand}" CommandParameter="{Binding SelectedResults.SelectedItem}"/>
		<KeyBinding Gesture="Alt+Enter" Command="{Binding OpenResultCommand}" CommandParameter="{Binding SelectedResults.SelectedItem}"/>
	</Window.KeyBindings>
	<Grid RowDefinitions="auto,*">
		<Grid.Resources>
			<ControlTheme x:Key="Tb" TargetType="TextBox">
				<Setter Property="CaretBrush" Value="{DynamicResource ThemeForegroundBrush}" />
				<Setter Property="Background" Value="{DynamicResource ThemeBackgroundBrush}" />
				<Setter Property="BorderBrush" Value="{DynamicResource ThemeBorderMidBrush}" />
				<Setter Property="Foreground" Value="{DynamicResource ThemeForegroundBrush}" />
				<Setter Property="BorderThickness" Value="{DynamicResource ThemeBorderThickness}" />
				<Setter Property="SelectionBrush" Value="{DynamicResource HighlightBrush}" />
				<Setter Property="SelectionForegroundBrush" Value="{DynamicResource HighlightForegroundBrush}" />
				<Setter Property="Padding" Value="4" />
				<Setter Property="ScrollViewer.IsScrollChainingEnabled" Value="True" />
				<Setter Property="Template">
					<ControlTemplate>
						<Border Name="border"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								CornerRadius="{TemplateBinding CornerRadius}">
							<DockPanel Margin="{TemplateBinding Padding}"
									   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									   VerticalAlignment="{TemplateBinding VerticalContentAlignment}">

								<TextBlock Name="floatingWatermark"
										   DockPanel.Dock="Top"
										   FontSize="{DynamicResource FontSizeSmall}"
										   Foreground="{DynamicResource ThemeAccentBrush}"
										   Text="{TemplateBinding Watermark}">
									<TextBlock.IsVisible>
										<MultiBinding Converter="{x:Static BoolConverters.And}">
											<Binding Path="UseFloatingWatermark"
													 RelativeSource="{RelativeSource TemplatedParent}" />
											<Binding Converter="{x:Static StringConverters.IsNotNullOrEmpty}"
													 Path="Text"
													 RelativeSource="{RelativeSource TemplatedParent}" />
										</MultiBinding>
									</TextBlock.IsVisible>
								</TextBlock>

								<DataValidationErrors>

									<Grid ColumnDefinitions="Auto,*,Auto">
										<ContentPresenter Grid.Column="0"
														  Grid.ColumnSpan="1"
														  Content="{TemplateBinding InnerLeftContent}" />
										<ScrollViewer Name="PART_ScrollViewer"
													  Grid.Column="1"
													  Grid.ColumnSpan="1"
													  AllowAutoHide="{TemplateBinding (ScrollViewer.AllowAutoHide)}"
													  BringIntoViewOnFocusChange="{TemplateBinding (ScrollViewer.BringIntoViewOnFocusChange)}"
													  HorizontalScrollBarVisibility="{TemplateBinding (ScrollViewer.HorizontalScrollBarVisibility)}"
													  IsScrollChainingEnabled="{TemplateBinding (ScrollViewer.IsScrollChainingEnabled)}"
													  VerticalScrollBarVisibility="{TemplateBinding (ScrollViewer.VerticalScrollBarVisibility)}">
											<Panel>
												<TextBlock Name="watermark"
														   IsVisible="{TemplateBinding Text,
                                                           Converter={x:Static StringConverters.IsNullOrEmpty}}"
														   Opacity="0.5"
														   Text="{TemplateBinding Watermark}"
														   TextAlignment="{TemplateBinding TextAlignment}"
														   TextWrapping="{TemplateBinding TextWrapping}" />
												<TextPresenter Name="PART_TextPresenter"
															   CaretBrush="{TemplateBinding CaretBrush}"
															   CaretIndex="{TemplateBinding CaretIndex}"
															   LineHeight="{TemplateBinding LineHeight}"
															   LetterSpacing="{TemplateBinding LetterSpacing}"
															   PasswordChar="{TemplateBinding PasswordChar}"
															   RevealPassword="{TemplateBinding RevealPassword}"
															   SelectionBrush="{TemplateBinding SelectionBrush}"
															   SelectionEnd="{TemplateBinding SelectionEnd}"
															   SelectionForegroundBrush="{TemplateBinding SelectionForegroundBrush}"
															   SelectionStart="{TemplateBinding SelectionStart}"
															   Text="{TemplateBinding Text,Mode=TwoWay}"
															   TextAlignment="{TemplateBinding TextAlignment}"
															   TextWrapping="{TemplateBinding TextWrapping}" />
											</Panel>
										</ScrollViewer>
										<ContentPresenter Grid.Column="2"
														  Grid.ColumnSpan="1"
														  Content="{TemplateBinding InnerRightContent}" />
									</Grid>
								</DataValidationErrors>
							</DockPanel>
						</Border>
					</ControlTemplate>
				</Setter>

				<Style Selector="^:pointerover /template/ Border#border">
					<Setter Property="BorderBrush" Value="{DynamicResource ThemeBorderHighBrush}" />
				</Style>
				<Style Selector="^:focus /template/ Border#border">
					<Setter Property="BorderBrush" Value="{DynamicResource ThemeBorderHighBrush}" />
				</Style>
				<Style Selector="^:error /template/ Border#border">
					<Setter Property="BorderBrush" Value="{DynamicResource ErrorBrush}" />
				</Style>
				<Style Selector="^ /template/ DockPanel">
					<Setter Property="Cursor" Value="IBeam" />
				</Style>
				<Style Selector="^:disabled /template/ Border#border">
					<Setter Property="Opacity" Value="{DynamicResource ThemeDisabledOpacity}" />
				</Style>

				<Style Selector="^.clearButton[AcceptsReturn=False][IsReadOnly=False]:focus:not(TextBox:empty)">
					<Setter Property="InnerRightContent">
						<Template>
							<Button Command="{Binding $parent[TextBox].Clear}"
									Focusable="False"
									Theme="{StaticResource SimpleTextBoxClearButtonTheme}"
									ClipToBounds="True" />
						</Template>
					</Setter>
				</Style>

				<Style Selector="^.revealPasswordButton[AcceptsReturn=False][IsReadOnly=False]:not(TextBox:empty)">
					<Setter Property="InnerRightContent">
						<Template>
							<Panel Margin="4,0">
								<Panel.Styles>
									<Style Selector="ToggleButton[IsChecked=True]">
										<Setter Property="(ToolTip.Tip)" Value="Hide Password" />
									</Style>
									<Style Selector="ToggleButton[IsChecked=False]">
										<Setter Property="(ToolTip.Tip)" Value="Show Password" />
									</Style>
								</Panel.Styles>
								<ToggleButton Background="Transparent"
											  Focusable="False"
											  IsChecked="{Binding $parent[TextBox].RevealPassword, Mode=TwoWay}"
											  Theme="{StaticResource SimplePasswordBoxRevealButtonTheme}"
											  ClipToBounds="True" />
							</Panel>
						</Template>
					</Setter>
				</Style>
			</ControlTheme>

		</Grid.Resources>


		<TextBlock x:Name="QueryTextSuggestionBox"
				   FontSize="{Binding #QueryTextBox.FontSize, Mode=OneWay}"
				   FontFamily="{CompiledBinding	#QueryTextBox.FontFamily, Mode=OneWay}"
				   FontStyle="{CompiledBinding #QueryTextBox.FontStyle, Mode=OneTime}"
				   FontWeight="{CompiledBinding	#QueryTextBox.FontWeight,Mode=OneWay}"
				   Margin="{Binding	#QueryTextBox.Margin, Mode=OneWay}"
				   Padding="{CompiledBinding #QueryTextBox.Padding, Mode=OneWay}"
				   Background="Transparent"
				   Foreground="LightGray"
				  
				   wox:HighLightTextBlock.Foreground="Transparent"
				   IsEnabled="False">
			<wox:HighLightTextBlock.HighlightText>
				<MultiBinding Converter="{StaticResource QuerySuggestionBoxConverter}">
					<Binding Path="QueryText" />
					<Binding Path="SelectedResults.SelectedItem" />
				</MultiBinding>
			</wox:HighLightTextBlock.HighlightText>
		</TextBlock>

		<TextBox Name="QueryTextBox" Margin="12" FontSize="28" Padding="0"
				 Text="{Binding	QueryText}"
				 CaretIndex="{Binding CaretIndex}" Background="Transparent"
				 Foreground="White"
				 CaretBrush="White"
				 Theme="{StaticResource	Tb}">

			<TextBox.KeyBindings>
				<KeyBinding Gesture="Up" Command="{Binding SelectedResults.SelectPrevItem}" />
				<KeyBinding Gesture="Down" Command="{Binding SelectedResults.SelectNextItem}" />
				<KeyBinding Gesture="PageUp" Command="{Binding SelectedResults.SelectPrevPage}" />
				<KeyBinding Gesture="PageDown" Command="{Binding SelectedResults.SelectNextPage}" />
				<KeyBinding Gesture="Tab" Command="{Binding AutoComplationCommand}"/>
			</TextBox.KeyBindings>
			<TextBox.ContextFlyout>
				<MenuFlyout Placement="Bottom">
					<MenuItem Header="Cut" Command="{Binding $parent[TextBox].Cut}" IsEnabled="{Binding $parent[TextBox].CanCut}" InputGesture="{x:Static TextBox.CutGesture}" />
					<MenuItem Header="Copy" Command="{Binding $parent[TextBox].Copy}" IsEnabled="{Binding $parent[TextBox].CanCopy}" InputGesture="{x:Static TextBox.CopyGesture}"/>
					<MenuItem Header="Paste" Command="{Binding $parent[TextBox].Paste}" IsEnabled="{Binding $parent[TextBox].CanPaste}" InputGesture="{x:Static TextBox.PasteGesture}"/>
					<Separator/>
					<MenuItem Header="{DynamicResource iconTraySettings}" Command="{Binding $parent[Window].DataContext.OpenSetting}"/>
				</MenuFlyout>
			</TextBox.ContextFlyout>
		</TextBox>
		<Grid Grid.Row="1" IsVisible="{Binding Results.IsVisible}">
			<v:ResultsView DataContext="{Binding Results}"/>
		</Grid>

		<Grid Grid.Row="1" IsVisible="{Binding ContextMenu.IsVisible}">
			<v:ResultsView DataContext="{Binding ContextMenu}"/>
		</Grid>

		<Grid Grid.Row="1" IsVisible="{Binding History.IsVisible}">
			<v:ResultsView DataContext="{Binding History}"/>
		</Grid>
	</Grid>
</Window>